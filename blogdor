#!/bin/bash

set -e

# Configuration
POSTS_DIR="./src/posts"
PUBLIC_DIR="public"
TEMPLATE="./src/template.html"
METADATA="./src/metadata.yaml"
STYLES="./src/style.css"
PREVIEW_DIR="preview" # Separate directory for preview builds

# Create directories if they don't exist
mkdir -p "$POSTS_DIR"
mkdir -p "$PUBLIC_DIR"
mkdir -p "$PREVIEW_DIR"

# Function to show help
show_help() {
  echo "Blogdor - A simple static blog generator"
  echo ""
  echo "Usage:"
  echo "  ./blogdor                 Build the blog (excluding drafts)"
  echo "  ./blogdor new [title]     Create a new blog post"
  echo "  ./blogdor preview         Build the blog including draft posts"
  echo "  ./blogdor serve           Start a local server for the public site"
  echo "  ./blogdor serve-preview   Start a local server for the preview site"
  echo "  ./blogdor clean           Remove the build directories"
  echo "  ./blogdor help            Show this help message"
  echo ""
}

# Function to build the blog (excluding drafts)
build_blog() {
  local output_dir="$1"
  local include_drafts="$2"
  local build_type="Production"

  if [ "$include_drafts" = true ]; then
    build_type="Preview"
  fi

  echo "üî® Building $build_type blog to $output_dir..."

  # Create output directory if it doesn't exist
  mkdir -p "$output_dir"

  # Copy CSS file to output directory
  cp $STYLES "$output_dir/"

  # Process all markdown files in the posts directory
  for markdown_file in "$POSTS_DIR"/*.md; do
    # Skip if no files found
    [ -e "$markdown_file" ] || continue

    # Check if post is a draft and skip if needed
    if [ "$include_drafts" = false ] && grep -q "^draft: true" "$markdown_file"; then
      echo "‚è© Skipping draft: $markdown_file"
      continue
    fi

    # Extract filename without extension
    filename=$(basename "$markdown_file" .md)

    # If this is a draft post in preview mode, add visual indicator to title
    if [ "$include_drafts" = true ] && grep -q "^draft: true" "$markdown_file"; then
      # Create a temporary file with modified title for drafts
      temp_file=$(mktemp)

      # Add draft indicator to title in the temporary file
      sed 's/^title: "\(.*\)"$/title: "[DRAFT] \1"/' "$markdown_file" >"$temp_file"

      # Use the temp file for conversion
      pandoc "$temp_file" \
        --template="$TEMPLATE" \
        --standalone \
        --metadata-file="$METADATA" \
        --metadata=draft:true \
        -o "$output_dir/${filename}.html"

      # Remove temp file
      rm "$temp_file"

      echo "‚úÖ Converted DRAFT $markdown_file to $output_dir/${filename}.html"
    else
      # Regular conversion for non-draft posts
      pandoc "$markdown_file" \
        --template="$TEMPLATE" \
        --standalone \
        --metadata-file="$METADATA" \
        -o "$output_dir/${filename}.html"

      echo "‚úÖ Converted $markdown_file to $output_dir/${filename}.html"
    fi
  done

  # Generate an index page from a special markdown file
  if [ -f "index.md" ]; then
    # Add a note to preview mode index
    if [ "$include_drafts" = true ]; then
      # Create a temp index with preview notice
      temp_index=$(mktemp)

      cat >"$temp_index" <<EOF
---
title: "Preview Mode - Including Drafts"
---

# Preview Mode - Including Drafts

This is a preview of your blog that includes both draft and published posts.
To view only published content, visit the [production build](../public/index.html).

$(cat index.md | grep -v "^---" | grep -v "^title:" | grep -v "^#")
EOF

      pandoc "$temp_index" \
        --template="$TEMPLATE" \
        --standalone \
        --metadata-file="$METADATA" \
        -o "$output_dir/index.html"

      rm "$temp_index"
    else
      # Normal index for production
      pandoc "index.md" \
        --template="$TEMPLATE" \
        --standalone \
        --metadata-file="$METADATA" \
        -o "$output_dir/index.html"
    fi

    echo "‚úÖ Generated index page"
  fi

  # Create a list of all posts
  if [ "$include_drafts" = true ]; then
    # For preview mode, create an archive that shows draft status
    create_archive "$output_dir" true
  else
    # For production mode, create a normal archive
    create_archive "$output_dir" false
  fi

  echo "üéâ $build_type build completed!"
}

# Function to create an archive page
create_archive() {
  local output_dir="$1"
  local include_drafts="$2"
  local archive_file="$output_dir/archive.html"
  local temp_archive=$(mktemp)

  # Create temporary markdown for the archive
  cat >"$temp_archive" <<EOF
---
title: "Blog Archive"
---

# Blog Archive

EOF

  # Add list of posts
  for post_file in "$POSTS_DIR"/*.md; do
    # Skip if no files found
    [ -e "$post_file" ] || continue

    # Get post metadata
    post_title=$(grep "^title:" "$post_file" | cut -d'"' -f2)
    post_date=$(grep "^date:" "$post_file" | cut -d'"' -f2)
    post_filename=$(basename "$post_file" .md)
    is_draft=$(grep -q "^draft: true" "$post_file" && echo true || echo false)

    # Skip drafts if not including them
    if [ "$include_drafts" = false ] && [ "$is_draft" = true ]; then
      continue
    fi

    # Add entry to archive
    if [ "$is_draft" = true ]; then
      echo "- $post_date: [${post_title} (DRAFT)](${post_filename}.html)" >>"$temp_archive"
    else
      echo "- $post_date: [${post_title}](${post_filename}.html)" >>"$temp_archive"
    fi
  done

  # Convert to HTML
  pandoc "$temp_archive" \
    --template="$TEMPLATE" \
    --standalone \
    --metadata-file="$METADATA" \
    -o "$archive_file"

  rm "$temp_archive"

  echo "‚úÖ Generated archive page"
}

# Function to create a new post
create_new_post() {
  # Get current date and time
  current_date=$(date +"%Y-%m-%d")
  current_datetime=$(date +"%Y-%m-%d %H:%M:%S")

  # Get title from argument or use datetime
  if [ -z "$1" ]; then
    # No title provided, use current datetime as title
    post_title="Post on $current_datetime"
    # Use timestamp for the slug
    post_slug=$(date +"%Y%m%d-%H%M%S")
  else
    # Use provided title
    post_title="$1"
    # Generate filename from title
    post_slug=$(echo "$post_title" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed 's/[^a-z0-9-]//g')
  fi

  # Create full filename
  filename="$POSTS_DIR/${current_date}-${post_slug}.md"

  # Check if file already exists
  if [ -f "$filename" ]; then
    echo "‚ùå Error: Post already exists: $filename"
    exit 1
  fi

  # Create the post with front matter
  cat >"$filename" <<EOF
---
title: "$post_title"
date: "$current_datetime"
draft: true
---

# $post_title

Write your content here...

## Section 1

Your text goes here.

\`\`\`bash
# Add code examples here
echo "Hello, World!"
\`\`\`

## Section 2

More content here...

![Alt text](images/placeholder.jpg)

> A blockquote for good measure

EOF

  echo "‚úÖ Created new post: $filename"
}

# Function to start a local server
serve_blog() {
  local dir="$1"
  echo "üåê Starting local server for $dir at http://localhost:8000"
  echo "Press Ctrl+C to stop"
  cd "$dir" && python3 -m http.server 8000
}

# Function to clean build directory
clean_blog() {
  echo "üßπ Cleaning build directories..."
  rm -rf "$PUBLIC_DIR"/*
  rm -rf "$PREVIEW_DIR"/*
  echo "‚úÖ Build directories cleaned"
}

# Main command logic
case "$1" in
"" | "build")
  build_blog "$PUBLIC_DIR" false
  ;;
"preview")
  build_blog "$PREVIEW_DIR" true
  ;;
"new")
  create_new_post "$2"
  ;;
"serve")
  serve_blog "$PUBLIC_DIR"
  ;;
"serve-preview")
  serve_blog "$PREVIEW_DIR"
  ;;
"clean")
  clean_blog
  ;;
"help")
  show_help
  ;;
*)
  echo "‚ùå Unknown command: $1"
  show_help
  exit 1
  ;;
esac

exit 0
